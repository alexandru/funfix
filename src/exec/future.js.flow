/*
 * Copyright (c) 2017 by The Funfix Project Developers.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* @flow */

import { Option, Try, Either } from "../core/disjunctions"
import { Scheduler } from "./scheduler"
import { ICancelable } from "./cancelable"

export interface IThenable<+T> {
  then<U>(
    onFulfill?: (value: T) => IThenable<U> | U,
    onReject?: (error: any) => IThenable<U> | U
  ): IThenable<U>;
}

export interface IPromise<+T> extends IThenable<T> {
  then<U>(
    onFulfill?: (value: T) => IThenable<U> | U,
    onReject?: (error: any) => IThenable<U> | U
  ): IPromise<U>;

  catch<U>(
    onReject?: (error: any) => IThenable<U> | U
  ): IPromise<U>;
}

declare export class Future<A> {
  value(): Option<Try<A>>;
  onComplete(f: (a: Try<A>) => void): void;
  cancel(): void;

  withScheduler(ec: Scheduler): Future<A>;
  transformWith<B>(failure: (e: any) => Future<B>, success: (a: A) => Future<B>): Future<B>;
  transform<B>(failure: (e: any) => B, success: (a: A) => B): Future<B>;
  attempt(): Future<Either<any, A>>;

  flatMap<B>(f: (a: A) => Future<B>): Future<B>;
  map<B>(f: (a: A) => B): Future<B>;
  recoverWith<AA>(f: (e: any) => Future<AA>): Future<A | AA>;
  recover<AA>(f: (e: any) => AA): Future<A | AA>;

  // From ICancelable
  cancel(): void;

  // From IPromise
  then<B>(onFulfill?: (value: A) => IThenable<B> | B, onReject?: (error: any) => IThenable<B> | B): Future<B>;
  catch<B>(onReject?: (error: any) => IThenable<B> | B): Future<A | B>;

  +_funKindF: Future<any>;
  +_funKindA: A;

  // Implements Constructor<T>
  static +_funErasure: Future<any>;

  static of<A>(thunk: () => A, ec?: Scheduler): Future<A>;
  static pure<A>(a: A, ec?: Scheduler): Future<A>;
  static raise(e: any, ec?: Scheduler): Future<empty>;
  static create<A>(register: (cb: (a: Try<A>) => void) => (ICancelable | void), ec?: Scheduler): Future<A>;
  static unit(): Future<void>;
  static tailRecM<A, B>(a: A, f: (a: A) => Future<Either<A, B>>): Future<B>;
  static fromPromise<A>(ref: IThenable<A>, ec?: Scheduler): Future<A>;
}
