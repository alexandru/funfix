/*
 * Copyright (c) 2017 by The Funfix Project Developers.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* @flow */

import type { EvalK, TypeClass } from "../../src/"
import { Eval } from "funfix-effect"
import {
  Functor,
  FunctorLaws,
  CoflatMap,
  CoflatMapLaws,
  Comonad,
  comonadOf,
  ComonadLaws,
  comonadLawsOf
} from "../../src/"


const erasure: Comonad<any> = Comonad._funErasure
const typeId: string = Comonad._funTypeId
const supertypes: string[] = Comonad._funSupertypeIds
const tc: TypeClass<Comonad<any>> = Comonad

const F: Comonad<Eval<any>> = comonadOf(Eval)
const coflatMap: CoflatMap<Eval<any>> = F
const functor: Functor<Eval<any>> = F

const laws1: ComonadLaws<Eval<any>> = comonadLawsOf(F)
const laws2: CoflatMapLaws<Eval<any>> = laws1
const laws3: FunctorLaws<Eval<any>> = laws1

const eval1: EvalK<string> = F.coflatMap(Eval.pure(1), _ => "Hello!")
const eval2: EvalK<EvalK<number>> = F.coflatten(Eval.pure(1))

const value1: number = F.extract(Eval.pure(1))
const value2: string = F.extract(Eval.pure("Hello!"))
