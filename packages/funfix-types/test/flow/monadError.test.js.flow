/*
 * Copyright (c) 2017 by The Funfix Project Developers.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* @flow */

import type { IOK, TypeClass } from "../../src/"
import { Either, applyMixins } from "funfix-core"
import { IO } from "funfix-effect"
import {
  Equiv,
  MonadError,
  MonadErrorLaws,
  ApplicativeError,
  ApplicativeErrorLaws,
  Applicative,
  ApplicativeLaws,
  Apply,
  ApplyLaws,
  Functor,
  FunctorLaws,
  monadErrorOf,
  monadErrorLawsOf
} from "../../src/"

const erasure: MonadError<any, any> = MonadError._funErasure
const typeId: string = MonadError._funTypeId
const supertypes: string[] = MonadError._funSupertypeIds
const tc: TypeClass<MonadError<any, any>> = MonadError

const F: MonadError<IO<any>, any> = monadErrorOf(IO)
const apError: ApplicativeError<IO<any>, any> = F
const applicative: Applicative<IO<any>> = F
const apply: Apply<IO<any>> = F
const functor: Functor<IO<any>> = F

const laws1: MonadErrorLaws<IO<any>, any> = monadErrorLawsOf(F)
const laws2: ApplicativeErrorLaws<IO<any>, any> = laws1
const laws3: ApplicativeLaws<IO<any>> = laws1
const laws4: ApplyLaws<IO<any>> = laws1
const laws5: FunctorLaws<IO<any>> = laws1

// $ExpectError
const err5: MonadErrorLaws<string> = monadErrorLawsOf(F)

class MonadErrorLawsForIO implements MonadErrorLaws<IO<any>, any> {
  +F: MonadError<IO<any>, any> = monadErrorOf(IO);

  // Functor
  covariantIdentity: <A>(fa: IOK<A>) => Equiv<IOK<A>>;
  covariantComposition: <A, B, C>(fa: IOK<A>, f: (a: A) => B, g: (b: B) => C) => Equiv<IOK<C>>;
  // Apply
  applyComposition: <A, B, C>(fa: IOK<A>, fab: IOK<(a: A) => B>, fbc: IOK<(b: B) => C>) => Equiv<IOK<C>>;
  applyProductConsistency: <A, B>(fa: IOK<A>, f: IOK<(a: A) => B>) => Equiv<IOK<B>>;
  applyMap2Consistency: <A, B>(fa: IOK<A>, f: IOK<(a: A) => B>) => Equiv<IOK<B>>;
  // FlatMap
  flatMapAssociativity: <A, B, C>(fa: IOK<A>, f: (a: A) => IOK<B>, g: (b: B) => IOK<C>) => Equiv<IOK<C>>;
  flatMapConsistentApply: <A, B>(fa: IOK<A>, fab: IOK<(a: A) => B>) => Equiv<IOK<B>>;
  followedByConsistency: <A, B>(fa: IOK<A>, fb: IOK<B>) => Equiv<IOK<B>>;
  followedByLConsistency: <A, B>(fa: IOK<A>, fb: IOK<B>) => Equiv<IOK<B>>;
  forEffectConsistency: <A, B>(fa: IOK<A>, fb: IOK<B>) => Equiv<IOK<A>>;
  forEffectLConsistency: <A, B>(fa: IOK<A>, fb: IOK<B>) => Equiv<IOK<A>>;
  tailRecMConsistentFlatMap: <A>(a: A, f: (a: A) => IOK<A>) => Equiv<IOK<A>>;
  // Applicative
  applicativeIdentity: <A>(fa: IOK<A>) => Equiv<IOK<A>>;
  applicativeHomomorphism: <A, B>(a: A, f: (a: A) => B) => Equiv<IOK<B>>;
  applicativeInterchange: <A, B>(a: A, ff: IOK<(a: A) => B>) => Equiv<IOK<B>>;
  applicativeMap: <A, B>(fa: IOK<A>, f: (a: A) => B) => Equiv<IOK<B>>;
  applicativeComposition: <A, B, C>(fa: IOK<A>, fab: IOK<(a: A) => B>, fbc: IOK<(b: B) => C>) => Equiv<IOK<C>>;
  applicativeUnit: <A>(a: A) => Equiv<IOK<A>>;
  // Monad
  monadLeftIdentity: <A, B>(a: A, f: (a: A) => IOK<B>) => Equiv<IOK<B>>;
  monadRightIdentity: <A, B>(fa: IOK<A>) => Equiv<IOK<A>>;
  mapFlatMapCoherence: <A, B>(fa: IOK<A>, f: (a: A) => B) => Equiv<IOK<B>>;
  tailRecMStackSafety: () => Equiv<IOK<number>>;
  // ApplicativeError
  monadErrorRecoverWith: <A>(e: any, f: (e: any) => IOK<A>) => Equiv<IOK<A>>;
  monadErrorRecover: <A>(e: any, f: (e: any) => A) => Equiv<IOK<A>>;
  recoverWithPure: <A>(a: A, f: (e: any) => IOK<A>) => Equiv<IOK<A>>;
  recoverPure: <A>(a: A, f: (e: any) => A) => Equiv<IOK<A>>;
  raiseErrorAttempt: (e: any) => Equiv<IOK<Either<any, void>>>;
  pureAttempt: <A>(a: A) => Equiv<IOK<Either<any, A>>>;
  // MonadError
  monadErrorLeftZero: <A, B>(e: any, f: (a: A) => IOK<B>) => Equiv<IOK<B>>
}

applyMixins(MonadErrorLawsForIO, [MonadErrorLaws])
