/*!
 * Copyright (c) 2017-2018 by The Funfix Project Developers.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* @flow */

import type { HK, Constructor, Monad } from "funland"
import { Right } from "funfix-core"
import * as ff from "../../src/"
import type { EvalK, EvalURI } from "../../src"
import { Eval, EvalModule } from "../../src/"

const ref1: ff.Eval<number> = ff.Eval.always(() => 1)
const ref2: Eval<number> = Eval.always(() => 1)
// $ExpectError
const error1: Eval<string> = Eval.now(10)

// Eval is covariant!
class Human { isHuman: boolean }
class Animal { isAnimal: boolean }
class Dog extends Animal { isDog: boolean }
class Cat extends Animal { isCat: boolean }

const animal: Eval<Animal> = Eval.always(() => new Dog())
// $ExpectError
const error2: Eval<Dog> = Eval.always(() => new Animal())

const r1: number = ref1.get()

// Covariance for getOrElse and getOrElseL
const dogEval: Eval<Dog> = Eval.always(() => new Dog())
const cov1: Eval<Animal> = dogEval
const cov2: Eval<Object> = dogEval

// Map and flatMap
const r14: Eval<Cat> = dogEval.map(_ => new Cat())
const r15: Eval<Cat> = dogEval.flatMap(_ => Eval.now(new Cat()))
const r16: Eval<Cat> = dogEval.chain(_ => Eval.now(new Cat()))
// $ExpectError
const error5: Eval<Cat> = dogEval.flatMap(_ => new Cat())

// Builders
const r19: Eval<Cat> = Eval.of(() => new Cat())
const r20: Eval<Cat> = Eval.always(() => new Cat())
const r21: Eval<Cat> = Eval.once(() => new Cat())
const r24: Eval<Cat> = Eval.now(new Cat())
const r25: Eval<Cat> = Eval.pure(new Cat())
const r26: Eval<Cat> = Eval.suspend(() => Eval.now(new Cat()))

// $ExpectError
const error6: Eval<empty> = Eval.now(1)
// $ExpectError
const error7: Eval<Dog> = Eval.now(new Cat())
// $ExpectError
const error8: Eval<Dog> = Eval.of(() => new Cat())
// $ExpectError
const error9: Eval<Dog> = Eval.always(() => new Cat())
// $ExpectError
const error10: Eval<Dog> = Eval.once(() => new Cat())
// $ExpectError
const error11: Eval<Dog> = Eval.suspend(() => Eval.now(new Cat()))

// Memoize
const r27: Eval<Cat> = Eval.of(() => new Cat()).memoize()

const u: Eval<void> = Eval.unit()
const a: Eval<number> = Eval.tailRecM("initial", a => Eval.now(Right(1)))

const all: Eval<number[]> = Eval.sequence([
  Eval.pure(1),
  Eval.pure(2),
  Eval.pure(3),
  Eval.pure(4)
])

const map2: Eval<number> = Eval.map2(Eval.pure(1), Eval.pure(1), (a, b) => a + b)
const map3: Eval<number> = Eval.map3(Eval.pure(1), Eval.pure(1), Eval.pure(1), (a, b, c) => a + b + c)
const map4: Eval<number> = Eval.map4(Eval.pure(1), Eval.pure(1), Eval.pure(1), Eval.pure(1), (a, b, c, d) => a + b + c + d)
const map5: Eval<number> = Eval.map5(Eval.pure(1), Eval.pure(1), Eval.pure(1), Eval.pure(1), Eval.pure(1), (a, b, c, d, e) => a + b + c + d + e)
const map6: Eval<number> = Eval.map6(Eval.pure(1), Eval.pure(1), Eval.pure(1), Eval.pure(1), Eval.pure(1), Eval.pure(1), (a, b, c, d, e, f) => a + b + c + d + e + f)

const hk: EvalK<number> = Eval.pure(1)
const tp: Constructor<Eval<any>> = Eval
const functor: Monad<EvalURI> = EvalModule
