/*!
 * Copyright (c) 2017-2018 by The Funfix Project Developers.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/* @flow */

import type { HK } from "funfix-types"
import { Applicative } from "funfix-types"
import { Equiv } from "./equiv"
import { ApplyLaws } from "./apply"

declare export class ApplicativeLaws<F> extends ApplyLaws<F> {
  +F: Applicative<F>;
  constructor(F: Applicative<F>): Applicative<F>;
  applicativeIdentity<A>(fa: HK<F, A>): Equiv<HK<F, A>>;
  applicativeHomomorphism<A, B>(a: A, f: (a: A) => B): Equiv<HK<F, B>>;
  applicativeInterchange<A, B>(a: A, ff: HK<F, (a: A) => B>): Equiv<HK<F, B>>;
  applicativeMap<A, B>(fa: HK<F, A>, f: (a: A) => B): Equiv<HK<F, B>>;
}
